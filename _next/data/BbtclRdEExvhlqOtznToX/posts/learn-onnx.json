{"pageProps":{"post":{"title":"いまさらONNXを調べた(v1.4.1)","date":"2019-02-02T04:00:01.000Z","tags":["onnx","deeplearning"],"summary":"ONNXは1年以上前から使ってるもののちゃんと仕様しらないな〜、だったので調べた。","slug":"learn-onnx","locale":"ja","body":{"raw":"\n[ONNX](https://onnx.ai/)は 1 年以上前から使ってるもののちゃんと仕様しらないな〜、だったので調べた。\n\nhttps://twitter.com/_tkato_/status/1076019658300346368\n\nとか言ってた。\n\n- 以下、ONNXv1.4.1 を対象\n  - https://github.com/onnx/onnx/tree/v1.4.1\n- ONNX のドキュメントは GitHub にまとまっている\n  - [Learn about ONNX spec](https://github.com/onnx/onnx/tree/v1.4.1#learn-about-the-onnx-spec)\n  - この記事は上記のドキュメントから必要なところをまとめたもの\n- ONNX 自体は Protobuf で定義した仕様で、ランタイム非依存。\n- ONNX と ONNX-ML があるけど、主に DeepLearning 向けに使いたいので ONNX について調べた\n\n## onnx.proto\n\nIR の仕様は以下で説明されている。\nhttps://github.com/onnx/onnx/blob/v1.4.1/docs/IR.md\n\nこれらは proto ファイルに実体が定義されているので、あわせてみるとわかりやすい。\n\nIR の定義の.proto \\\nhttps://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx.proto3\n\n例えば[`ModelProto`](https://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx.proto3#L190-L234)が[ここの](https://github.com/onnx/onnx/blob/v1.4.1/docs/IR.md#models)モデル定義\n同様に proto とドキュメントが対応付けできる。\n\nまた、ONNX でつかえる行列データは Tensor 型があるが、以下の定義。 \\\nhttps://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx.proto3#L281-L314\n\nポピュラーなのは uint8~float64 かな。\n任意精度はなさそうだけど Issue に上がっていた気がする。\n\n続いて IR の上に構築される Operator や OperatorSet の定義 \\\nhttps://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx-operators.proto3\n\nOperator は Conv とか FC とか。OperatorSet はそれらをまとめてバージョン付したもの。\nデフォルトでは ai.onnx の opset が使える。これで足りない場合はユーザーが同様に定義できる。\n詳細は以下。 \\\nhttps://github.com/onnx/onnx/blob/v1.4.1/docs/IR.md#operator-sets\n\nprotobuf は、コンパイルすることで C++や Python から呼び出せるクラスになる。 \\\n`int64 version = 2;` のような右辺は field number で、後方互換性を保ってフィールドを追加したり名前を変えたりするための識別子。\n\n## Versioning\n\nhttps://github.com/onnx/onnx/blob/v1.4.1/docs/Versioning.md\n\n特に道具として ONNX を使おうとするとこのバージョンの理解は必要。\nフレームワーク A から B へ ONNX 経由で変換したいときに、バージョン違いで変換できないこともあるので。\n\nIR, model, opset でそれぞれバージョンを定義。使う側として意識するのは opset かな。\n\n- IR specification\n  - Float などの型定義など、Operator などを構築する IR そのもの\n  - 最新は v4 で BFLOAT16 型の追加など\n- version of model\n  - 学習済みモデルを ONNX として配布する場合のバージョンの付け方（任意）\n- version of operator set\n  - conv, fc など operator の集合を定義して、そのバージョン管理をする\n  - 例えば opset v9 から XXX は導入されたとかそういう\n  - モデルは、自身が依存する opset とそのバージョンを明示する(例: このモデルは ai.onnx v9 の opset を使いますよ)\n  - opset 自体もユーザーが定義できる\n  - version だけでなく status 属性（EXPERIMENTAL or STABLE）もあり、STABLE になったら変更してはいけない\n\nあとは ONNX 自体も semantic versioning でバージョン付されている。\n\nopset のバージョンが違う場合に変換するための Version Converter がある。\nだけど、opset v9 には対応していないのかな。issue にも上がっていた気がした。\nこれらのツールは基本 C++で書いてあるけど Python で呼び出せるように wrap されている。\n\nONNX Model Opset Version Converter \\\nhttps://github.com/onnx/onnx/blob/v1.4.1/docs/OpsetVersionConverter.md\n\n## ONNX Optimizer\n\nONNX Optimizer \\\nhttps://github.com/onnx/onnx/blob/master/docs/Optimizer.md\n\nコンパイラのパスと同じようなもの。\nONNX のバックエンドに実装されるであろう最適化の中でもバックエンド比依存のものは IR でやっていきましょうというよくあるもの。\n\n汎用的な pass は以下に組み込まれている\nhttps://github.com/onnx/onnx/tree/master/onnx/optimizer/passes\n\n`fuse_bn_into_conv` などある。グラフレベルの最適化、ある程度 ONNX でやっちゃっても良さそう。\n\npass は Python ではかけないみたい。Python でかけると色々やりたいことあるんだけどな。\n\n## TypeDenotation\n\nonnx/TypeDenotation.md at master · onnx/onnx \\\nhttps://github.com/onnx/onnx/blob/master/docs/TypeDenotation.md\n\nonnx/MetadataProps.md at master · onnx/onnx \\\nhttps://github.com/onnx/onnx/blob/master/docs/MetadataProps.md\n\nモデルのメタデータをどうやって保持するか。これ面白い。\n\ndenotation 属性に RGB とか、NHCW のどれかとかを格納するみたい。値が取りうる範囲 0-255 とかも。\n\nモデルの前処理後処理の情報もメタデータとして ONNX に書くのは良いですね。やろうと思えばソフトウェアで処理できる。\n\n---\n\nこれで ONNX の上を歩けるようになったぞ〜。万が一バックエンド実装する機会が来たら、また詳細を調べようか。\n","code":"var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var u=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),N=(e,n)=>{for(var t in n)i(e,t,{get:n[t],enumerable:!0})},c=(e,n,t,h)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of x(n))!m.call(e,r)&&r!==t&&i(e,r,{get:()=>n[r],enumerable:!(h=a(n,r))||h.enumerable});return e};var g=(e,n,t)=>(t=e!=null?p(b(e)):{},c(n||!e||!e.__esModule?i(t,\"default\",{value:e,enumerable:!0}):t,e)),v=e=>c(i({},\"__esModule\",{value:!0}),e);var d=u((R,l)=>{l.exports=_jsx_runtime});var I={};N(I,{default:()=>X,frontmatter:()=>O});var o=g(d()),O={title:\"\\u3044\\u307E\\u3055\\u3089ONNX\\u3092\\u8ABF\\u3079\\u305F(v1.4.1)\",date:new Date(1549080001e3),slug:\"learn-onnx\",tags:[\"onnx\",\"deeplearning\"],summary:\"ONNX\\u306F1\\u5E74\\u4EE5\\u4E0A\\u524D\\u304B\\u3089\\u4F7F\\u3063\\u3066\\u308B\\u3082\\u306E\\u306E\\u3061\\u3083\\u3093\\u3068\\u4ED5\\u69D8\\u3057\\u3089\\u306A\\u3044\\u306A\\u301C\\u3001\\u3060\\u3063\\u305F\\u306E\\u3067\\u8ABF\\u3079\\u305F\\u3002\"};function s(e){let n=Object.assign({p:\"p\",a:\"a\",ul:\"ul\",li:\"li\",h2:\"h2\",span:\"span\",br:\"br\",code:\"code\",hr:\"hr\"},e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:\"https://onnx.ai/\",children:\"ONNX\"}),\"\\u306F 1 \\u5E74\\u4EE5\\u4E0A\\u524D\\u304B\\u3089\\u4F7F\\u3063\\u3066\\u308B\\u3082\\u306E\\u306E\\u3061\\u3083\\u3093\\u3068\\u4ED5\\u69D8\\u3057\\u3089\\u306A\\u3044\\u306A\\u301C\\u3001\\u3060\\u3063\\u305F\\u306E\\u3067\\u8ABF\\u3079\\u305F\\u3002\"]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:\"https://twitter.com/_tkato_/status/1076019658300346368\",children:\"https://twitter.com/_tkato_/status/1076019658300346368\"})}),(0,o.jsx)(n.p,{children:\"\\u3068\\u304B\\u8A00\\u3063\\u3066\\u305F\\u3002\"}),(0,o.jsxs)(n.ul,{children:[(0,o.jsxs)(n.li,{children:[\"\\u4EE5\\u4E0B\\u3001ONNXv1.4.1 \\u3092\\u5BFE\\u8C61\",(0,o.jsx)(n.ul,{children:(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/tree/v1.4.1\",children:\"https://github.com/onnx/onnx/tree/v1.4.1\"})})})]}),(0,o.jsxs)(n.li,{children:[\"ONNX \\u306E\\u30C9\\u30AD\\u30E5\\u30E1\\u30F3\\u30C8\\u306F GitHub \\u306B\\u307E\\u3068\\u307E\\u3063\\u3066\\u3044\\u308B\",(0,o.jsxs)(n.ul,{children:[(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/tree/v1.4.1#learn-about-the-onnx-spec\",children:\"Learn about ONNX spec\"})}),(0,o.jsx)(n.li,{children:\"\\u3053\\u306E\\u8A18\\u4E8B\\u306F\\u4E0A\\u8A18\\u306E\\u30C9\\u30AD\\u30E5\\u30E1\\u30F3\\u30C8\\u304B\\u3089\\u5FC5\\u8981\\u306A\\u3068\\u3053\\u308D\\u3092\\u307E\\u3068\\u3081\\u305F\\u3082\\u306E\"})]})]}),(0,o.jsx)(n.li,{children:\"ONNX \\u81EA\\u4F53\\u306F Protobuf \\u3067\\u5B9A\\u7FA9\\u3057\\u305F\\u4ED5\\u69D8\\u3067\\u3001\\u30E9\\u30F3\\u30BF\\u30A4\\u30E0\\u975E\\u4F9D\\u5B58\\u3002\"}),(0,o.jsx)(n.li,{children:\"ONNX \\u3068 ONNX-ML \\u304C\\u3042\\u308B\\u3051\\u3069\\u3001\\u4E3B\\u306B DeepLearning \\u5411\\u3051\\u306B\\u4F7F\\u3044\\u305F\\u3044\\u306E\\u3067 ONNX \\u306B\\u3064\\u3044\\u3066\\u8ABF\\u3079\\u305F\"})]}),(0,o.jsxs)(n.h2,{id:\"onnxproto\",children:[(0,o.jsx)(n.a,{href:\"#onnxproto\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,o.jsx)(n.span,{className:\"icon icon-link\"})}),\"onnx.proto\"]}),(0,o.jsxs)(n.p,{children:[\"IR \\u306E\\u4ED5\\u69D8\\u306F\\u4EE5\\u4E0B\\u3067\\u8AAC\\u660E\\u3055\\u308C\\u3066\\u3044\\u308B\\u3002 \",(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/IR.md\",children:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/IR.md\"})]}),(0,o.jsx)(n.p,{children:\"\\u3053\\u308C\\u3089\\u306F proto \\u30D5\\u30A1\\u30A4\\u30EB\\u306B\\u5B9F\\u4F53\\u304C\\u5B9A\\u7FA9\\u3055\\u308C\\u3066\\u3044\\u308B\\u306E\\u3067\\u3001\\u3042\\u308F\\u305B\\u3066\\u307F\\u308B\\u3068\\u308F\\u304B\\u308A\\u3084\\u3059\\u3044\\u3002\"}),(0,o.jsxs)(n.p,{children:[\"IR \\u306E\\u5B9A\\u7FA9\\u306E.proto\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx.proto3\",children:\"https://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx.proto3\"})]}),(0,o.jsxs)(n.p,{children:[\"\\u4F8B\\u3048\\u3070\",(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx.proto3#L190-L234\",children:(0,o.jsx)(n.code,{children:\"ModelProto\"})}),\"\\u304C\",(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/IR.md#models\",children:\"\\u3053\\u3053\\u306E\"}),\"\\u30E2\\u30C7\\u30EB\\u5B9A\\u7FA9 \\u540C\\u69D8\\u306B proto \\u3068\\u30C9\\u30AD\\u30E5\\u30E1\\u30F3\\u30C8\\u304C\\u5BFE\\u5FDC\\u4ED8\\u3051\\u3067\\u304D\\u308B\\u3002\"]}),(0,o.jsxs)(n.p,{children:[\"\\u307E\\u305F\\u3001ONNX \\u3067\\u3064\\u304B\\u3048\\u308B\\u884C\\u5217\\u30C7\\u30FC\\u30BF\\u306F Tensor \\u578B\\u304C\\u3042\\u308B\\u304C\\u3001\\u4EE5\\u4E0B\\u306E\\u5B9A\\u7FA9\\u3002\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx.proto3#L281-L314\",children:\"https://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx.proto3#L281-L314\"})]}),(0,o.jsx)(n.p,{children:\"\\u30DD\\u30D4\\u30E5\\u30E9\\u30FC\\u306A\\u306E\\u306F uint8~float64 \\u304B\\u306A\\u3002 \\u4EFB\\u610F\\u7CBE\\u5EA6\\u306F\\u306A\\u3055\\u305D\\u3046\\u3060\\u3051\\u3069 Issue \\u306B\\u4E0A\\u304C\\u3063\\u3066\\u3044\\u305F\\u6C17\\u304C\\u3059\\u308B\\u3002\"}),(0,o.jsxs)(n.p,{children:[\"\\u7D9A\\u3044\\u3066 IR \\u306E\\u4E0A\\u306B\\u69CB\\u7BC9\\u3055\\u308C\\u308B Operator \\u3084 OperatorSet \\u306E\\u5B9A\\u7FA9\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx-operators.proto3\",children:\"https://github.com/onnx/onnx/blob/v1.4.1/onnx/onnx-operators.proto3\"})]}),(0,o.jsxs)(n.p,{children:[\"Operator \\u306F Conv \\u3068\\u304B FC \\u3068\\u304B\\u3002OperatorSet \\u306F\\u305D\\u308C\\u3089\\u3092\\u307E\\u3068\\u3081\\u3066\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u4ED8\\u3057\\u305F\\u3082\\u306E\\u3002 \\u30C7\\u30D5\\u30A9\\u30EB\\u30C8\\u3067\\u306F ai.onnx \\u306E opset \\u304C\\u4F7F\\u3048\\u308B\\u3002\\u3053\\u308C\\u3067\\u8DB3\\u308A\\u306A\\u3044\\u5834\\u5408\\u306F\\u30E6\\u30FC\\u30B6\\u30FC\\u304C\\u540C\\u69D8\\u306B\\u5B9A\\u7FA9\\u3067\\u304D\\u308B\\u3002 \\u8A73\\u7D30\\u306F\\u4EE5\\u4E0B\\u3002\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/IR.md#operator-sets\",children:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/IR.md#operator-sets\"})]}),(0,o.jsxs)(n.p,{children:[\"protobuf \\u306F\\u3001\\u30B3\\u30F3\\u30D1\\u30A4\\u30EB\\u3059\\u308B\\u3053\\u3068\\u3067 C++\\u3084 Python \\u304B\\u3089\\u547C\\u3073\\u51FA\\u305B\\u308B\\u30AF\\u30E9\\u30B9\\u306B\\u306A\\u308B\\u3002\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.code,{children:\"int64 version = 2;\"}),\" \\u306E\\u3088\\u3046\\u306A\\u53F3\\u8FBA\\u306F field number \\u3067\\u3001\\u5F8C\\u65B9\\u4E92\\u63DB\\u6027\\u3092\\u4FDD\\u3063\\u3066\\u30D5\\u30A3\\u30FC\\u30EB\\u30C9\\u3092\\u8FFD\\u52A0\\u3057\\u305F\\u308A\\u540D\\u524D\\u3092\\u5909\\u3048\\u305F\\u308A\\u3059\\u308B\\u305F\\u3081\\u306E\\u8B58\\u5225\\u5B50\\u3002\"]}),(0,o.jsxs)(n.h2,{id:\"versioning\",children:[(0,o.jsx)(n.a,{href:\"#versioning\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,o.jsx)(n.span,{className:\"icon icon-link\"})}),\"Versioning\"]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/Versioning.md\",children:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/Versioning.md\"})}),(0,o.jsx)(n.p,{children:\"\\u7279\\u306B\\u9053\\u5177\\u3068\\u3057\\u3066 ONNX \\u3092\\u4F7F\\u304A\\u3046\\u3068\\u3059\\u308B\\u3068\\u3053\\u306E\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u306E\\u7406\\u89E3\\u306F\\u5FC5\\u8981\\u3002 \\u30D5\\u30EC\\u30FC\\u30E0\\u30EF\\u30FC\\u30AF A \\u304B\\u3089 B \\u3078 ONNX \\u7D4C\\u7531\\u3067\\u5909\\u63DB\\u3057\\u305F\\u3044\\u3068\\u304D\\u306B\\u3001\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u9055\\u3044\\u3067\\u5909\\u63DB\\u3067\\u304D\\u306A\\u3044\\u3053\\u3068\\u3082\\u3042\\u308B\\u306E\\u3067\\u3002\"}),(0,o.jsx)(n.p,{children:\"IR, model, opset \\u3067\\u305D\\u308C\\u305E\\u308C\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u3092\\u5B9A\\u7FA9\\u3002\\u4F7F\\u3046\\u5074\\u3068\\u3057\\u3066\\u610F\\u8B58\\u3059\\u308B\\u306E\\u306F opset \\u304B\\u306A\\u3002\"}),(0,o.jsxs)(n.ul,{children:[(0,o.jsxs)(n.li,{children:[\"IR specification\",(0,o.jsxs)(n.ul,{children:[(0,o.jsx)(n.li,{children:\"Float \\u306A\\u3069\\u306E\\u578B\\u5B9A\\u7FA9\\u306A\\u3069\\u3001Operator \\u306A\\u3069\\u3092\\u69CB\\u7BC9\\u3059\\u308B IR \\u305D\\u306E\\u3082\\u306E\"}),(0,o.jsx)(n.li,{children:\"\\u6700\\u65B0\\u306F v4 \\u3067 BFLOAT16 \\u578B\\u306E\\u8FFD\\u52A0\\u306A\\u3069\"})]})]}),(0,o.jsxs)(n.li,{children:[\"version of model\",(0,o.jsx)(n.ul,{children:(0,o.jsx)(n.li,{children:\"\\u5B66\\u7FD2\\u6E08\\u307F\\u30E2\\u30C7\\u30EB\\u3092 ONNX \\u3068\\u3057\\u3066\\u914D\\u5E03\\u3059\\u308B\\u5834\\u5408\\u306E\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u306E\\u4ED8\\u3051\\u65B9\\uFF08\\u4EFB\\u610F\\uFF09\"})})]}),(0,o.jsxs)(n.li,{children:[\"version of operator set\",(0,o.jsxs)(n.ul,{children:[(0,o.jsx)(n.li,{children:\"conv, fc \\u306A\\u3069 operator \\u306E\\u96C6\\u5408\\u3092\\u5B9A\\u7FA9\\u3057\\u3066\\u3001\\u305D\\u306E\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u7BA1\\u7406\\u3092\\u3059\\u308B\"}),(0,o.jsx)(n.li,{children:\"\\u4F8B\\u3048\\u3070 opset v9 \\u304B\\u3089 XXX \\u306F\\u5C0E\\u5165\\u3055\\u308C\\u305F\\u3068\\u304B\\u305D\\u3046\\u3044\\u3046\"}),(0,o.jsx)(n.li,{children:\"\\u30E2\\u30C7\\u30EB\\u306F\\u3001\\u81EA\\u8EAB\\u304C\\u4F9D\\u5B58\\u3059\\u308B opset \\u3068\\u305D\\u306E\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u3092\\u660E\\u793A\\u3059\\u308B(\\u4F8B: \\u3053\\u306E\\u30E2\\u30C7\\u30EB\\u306F ai.onnx v9 \\u306E opset \\u3092\\u4F7F\\u3044\\u307E\\u3059\\u3088)\"}),(0,o.jsx)(n.li,{children:\"opset \\u81EA\\u4F53\\u3082\\u30E6\\u30FC\\u30B6\\u30FC\\u304C\\u5B9A\\u7FA9\\u3067\\u304D\\u308B\"}),(0,o.jsx)(n.li,{children:\"version \\u3060\\u3051\\u3067\\u306A\\u304F status \\u5C5E\\u6027\\uFF08EXPERIMENTAL or STABLE\\uFF09\\u3082\\u3042\\u308A\\u3001STABLE \\u306B\\u306A\\u3063\\u305F\\u3089\\u5909\\u66F4\\u3057\\u3066\\u306F\\u3044\\u3051\\u306A\\u3044\"})]})]})]}),(0,o.jsx)(n.p,{children:\"\\u3042\\u3068\\u306F ONNX \\u81EA\\u4F53\\u3082 semantic versioning \\u3067\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u4ED8\\u3055\\u308C\\u3066\\u3044\\u308B\\u3002\"}),(0,o.jsx)(n.p,{children:\"opset \\u306E\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u304C\\u9055\\u3046\\u5834\\u5408\\u306B\\u5909\\u63DB\\u3059\\u308B\\u305F\\u3081\\u306E Version Converter \\u304C\\u3042\\u308B\\u3002 \\u3060\\u3051\\u3069\\u3001opset v9 \\u306B\\u306F\\u5BFE\\u5FDC\\u3057\\u3066\\u3044\\u306A\\u3044\\u306E\\u304B\\u306A\\u3002issue \\u306B\\u3082\\u4E0A\\u304C\\u3063\\u3066\\u3044\\u305F\\u6C17\\u304C\\u3057\\u305F\\u3002 \\u3053\\u308C\\u3089\\u306E\\u30C4\\u30FC\\u30EB\\u306F\\u57FA\\u672C C++\\u3067\\u66F8\\u3044\\u3066\\u3042\\u308B\\u3051\\u3069 Python \\u3067\\u547C\\u3073\\u51FA\\u305B\\u308B\\u3088\\u3046\\u306B wrap \\u3055\\u308C\\u3066\\u3044\\u308B\\u3002\"}),(0,o.jsxs)(n.p,{children:[\"ONNX Model Opset Version Converter\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/OpsetVersionConverter.md\",children:\"https://github.com/onnx/onnx/blob/v1.4.1/docs/OpsetVersionConverter.md\"})]}),(0,o.jsxs)(n.h2,{id:\"onnx-optimizer\",children:[(0,o.jsx)(n.a,{href:\"#onnx-optimizer\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,o.jsx)(n.span,{className:\"icon icon-link\"})}),\"ONNX Optimizer\"]}),(0,o.jsxs)(n.p,{children:[\"ONNX Optimizer\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/master/docs/Optimizer.md\",children:\"https://github.com/onnx/onnx/blob/master/docs/Optimizer.md\"})]}),(0,o.jsx)(n.p,{children:\"\\u30B3\\u30F3\\u30D1\\u30A4\\u30E9\\u306E\\u30D1\\u30B9\\u3068\\u540C\\u3058\\u3088\\u3046\\u306A\\u3082\\u306E\\u3002 ONNX \\u306E\\u30D0\\u30C3\\u30AF\\u30A8\\u30F3\\u30C9\\u306B\\u5B9F\\u88C5\\u3055\\u308C\\u308B\\u3067\\u3042\\u308D\\u3046\\u6700\\u9069\\u5316\\u306E\\u4E2D\\u3067\\u3082\\u30D0\\u30C3\\u30AF\\u30A8\\u30F3\\u30C9\\u6BD4\\u4F9D\\u5B58\\u306E\\u3082\\u306E\\u306F IR \\u3067\\u3084\\u3063\\u3066\\u3044\\u304D\\u307E\\u3057\\u3087\\u3046\\u3068\\u3044\\u3046\\u3088\\u304F\\u3042\\u308B\\u3082\\u306E\\u3002\"}),(0,o.jsxs)(n.p,{children:[\"\\u6C4E\\u7528\\u7684\\u306A pass \\u306F\\u4EE5\\u4E0B\\u306B\\u7D44\\u307F\\u8FBC\\u307E\\u308C\\u3066\\u3044\\u308B \",(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/tree/master/onnx/optimizer/passes\",children:\"https://github.com/onnx/onnx/tree/master/onnx/optimizer/passes\"})]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:\"fuse_bn_into_conv\"}),\" \\u306A\\u3069\\u3042\\u308B\\u3002\\u30B0\\u30E9\\u30D5\\u30EC\\u30D9\\u30EB\\u306E\\u6700\\u9069\\u5316\\u3001\\u3042\\u308B\\u7A0B\\u5EA6 ONNX \\u3067\\u3084\\u3063\\u3061\\u3083\\u3063\\u3066\\u3082\\u826F\\u3055\\u305D\\u3046\\u3002\"]}),(0,o.jsx)(n.p,{children:\"pass \\u306F Python \\u3067\\u306F\\u304B\\u3051\\u306A\\u3044\\u307F\\u305F\\u3044\\u3002Python \\u3067\\u304B\\u3051\\u308B\\u3068\\u8272\\u3005\\u3084\\u308A\\u305F\\u3044\\u3053\\u3068\\u3042\\u308B\\u3093\\u3060\\u3051\\u3069\\u306A\\u3002\"}),(0,o.jsxs)(n.h2,{id:\"typedenotation\",children:[(0,o.jsx)(n.a,{href:\"#typedenotation\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,o.jsx)(n.span,{className:\"icon icon-link\"})}),\"TypeDenotation\"]}),(0,o.jsxs)(n.p,{children:[\"onnx/TypeDenotation.md at master \\xB7 onnx/onnx\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/master/docs/TypeDenotation.md\",children:\"https://github.com/onnx/onnx/blob/master/docs/TypeDenotation.md\"})]}),(0,o.jsxs)(n.p,{children:[\"onnx/MetadataProps.md at master \\xB7 onnx/onnx\",(0,o.jsx)(n.br,{}),(0,o.jsx)(n.a,{href:\"https://github.com/onnx/onnx/blob/master/docs/MetadataProps.md\",children:\"https://github.com/onnx/onnx/blob/master/docs/MetadataProps.md\"})]}),(0,o.jsx)(n.p,{children:\"\\u30E2\\u30C7\\u30EB\\u306E\\u30E1\\u30BF\\u30C7\\u30FC\\u30BF\\u3092\\u3069\\u3046\\u3084\\u3063\\u3066\\u4FDD\\u6301\\u3059\\u308B\\u304B\\u3002\\u3053\\u308C\\u9762\\u767D\\u3044\\u3002\"}),(0,o.jsx)(n.p,{children:\"denotation \\u5C5E\\u6027\\u306B RGB \\u3068\\u304B\\u3001NHCW \\u306E\\u3069\\u308C\\u304B\\u3068\\u304B\\u3092\\u683C\\u7D0D\\u3059\\u308B\\u307F\\u305F\\u3044\\u3002\\u5024\\u304C\\u53D6\\u308A\\u3046\\u308B\\u7BC4\\u56F2 0-255 \\u3068\\u304B\\u3082\\u3002\"}),(0,o.jsx)(n.p,{children:\"\\u30E2\\u30C7\\u30EB\\u306E\\u524D\\u51E6\\u7406\\u5F8C\\u51E6\\u7406\\u306E\\u60C5\\u5831\\u3082\\u30E1\\u30BF\\u30C7\\u30FC\\u30BF\\u3068\\u3057\\u3066 ONNX \\u306B\\u66F8\\u304F\\u306E\\u306F\\u826F\\u3044\\u3067\\u3059\\u306D\\u3002\\u3084\\u308D\\u3046\\u3068\\u601D\\u3048\\u3070\\u30BD\\u30D5\\u30C8\\u30A6\\u30A7\\u30A2\\u3067\\u51E6\\u7406\\u3067\\u304D\\u308B\\u3002\"}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.p,{children:\"\\u3053\\u308C\\u3067 ONNX \\u306E\\u4E0A\\u3092\\u6B69\\u3051\\u308B\\u3088\\u3046\\u306B\\u306A\\u3063\\u305F\\u305E\\u301C\\u3002\\u4E07\\u304C\\u4E00\\u30D0\\u30C3\\u30AF\\u30A8\\u30F3\\u30C9\\u5B9F\\u88C5\\u3059\\u308B\\u6A5F\\u4F1A\\u304C\\u6765\\u305F\\u3089\\u3001\\u307E\\u305F\\u8A73\\u7D30\\u3092\\u8ABF\\u3079\\u3088\\u3046\\u304B\\u3002\"})]})}function f(e={}){let{wrapper:n}=e.components||{};return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(s,e)})):s(e)}var X=f;return v(I);})();\n;return Component;"},"_id":"posts/201902/learn-onnx.mdx","_raw":{"sourceFilePath":"posts/201902/learn-onnx.mdx","sourceFileName":"learn-onnx.mdx","sourceFileDir":"posts/201902","contentType":"mdx","flattenedPath":"posts/201902/learn-onnx"},"type":"Blog","readingTime":{"text":"6 min read","minutes":5.48,"time":328800,"words":1096},"path":"posts/learn-onnx","filePath":"posts/201902/learn-onnx.mdx","toc":[{"value":"onnx.proto","url":"#onnxproto","depth":2},{"value":"Versioning","url":"#versioning","depth":2},{"value":"ONNX Optimizer","url":"#onnx-optimizer","depth":2},{"value":"TypeDenotation","url":"#typedenotation","depth":2}]},"authorDetails":[{"name":"Tomohiro Kato / @tkat0","avatar":"/static/images/tkat0.jpg","occupation":"Softweare Engineer / Double Bassist","twitter":"https://twitter.com/_tkato_","linkedin":"https://www.linkedin.com/in/tkat0/","github":"https://github.com/tkat0","slug":"default","locale":"en","type":"Authors","readingTime":{"text":"3 min read","minutes":2.33,"time":139800,"words":466},"path":"posts/default","filePath":"authors/default.en.mdx","toc":[{"value":"2021-","url":"#2021-","depth":3},{"value":"2018-2020","url":"#2018-2020","depth":3},{"value":"2014-2017","url":"#2014-2017","depth":3},{"value":"Publications","url":"#publications","depth":3},{"value":"2022","url":"#2022","depth":4},{"value":"2021","url":"#2021","depth":4},{"value":"2020","url":"#2020","depth":4},{"value":"2019","url":"#2019","depth":4},{"value":"2018","url":"#2018","depth":4}],"tags":[]}],"prev":{"title":"Distillerのthinningの仕様","date":"2019-02-02T03:00:01.000Z","tags":["distiller","deeplearning","pruning"],"summary":"DistillerはPytorch向けのpruningやquantizationを行うライブラリだが、Channel Pruning後にWeightをshrinkしてサイズを小さくする\"thinning\"ができる。\n今回はそのソースを読んで気がついたことのまとめ。","slug":"distiller-thinning","locale":"ja","type":"Blog","readingTime":{"text":"3 min read","minutes":3,"time":180000,"words":600},"path":"posts/distiller-thinning","filePath":"posts/201902/distiller-thinning.mdx","toc":[]},"next":{"title":"Chainer-compiler調査（1）","date":"2019-02-04T00:30:00.000Z","tags":["chainer-compiler","deeplearning","chainer"],"summary":"今日からChainer-compilerについて調べてみよう。","slug":"learn-chainer-compiler-1","locale":"ja","type":"Blog","readingTime":{"text":"6 min read","minutes":5.59,"time":335400,"words":1118},"path":"posts/learn-chainer-compiler-1","filePath":"posts/201902/learn-chainer-compiler-1.mdx","toc":[{"value":"Examples","url":"#examples","depth":2},{"value":"Overview of components","url":"#overview-of-components","depth":2},{"value":"chainer-compiler/python","url":"#chainer-compilerpython","depth":2},{"value":"次にやりたいこと","url":"#次にやりたいこと","depth":2}]}},"__N_SSG":true}